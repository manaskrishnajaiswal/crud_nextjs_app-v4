import { BiEdit, BiTrashAlt, BiUserCircle, BiArrowBack } from "react-icons/bi";
import { BsDatabaseAdd, BsDatabase } from "react-icons/bs";
import Head from "next/head";
import axios from "axios";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { emplpoyeeGetAction } from "@/frontend/redux/actions/employeeActions";
import { ToastContainer } from "react-toastify";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import UpdateUserForm from "@/frontend/components/UpdateUserForm";
import {
  EMPLOYEES_GET_RESET,
  EMPLOYEE_GET_RESET,
  EMPLOYEE_UPDATE_RESET,
} from "@/frontend/redux/constants/employeeConstants";
import ViewUserForm from "@/frontend/components/ViewUserForm";
import Link from "next/link";
import ColumnNameType from "@/frontend/components/ColumnNameType";
import ColumnData from "@/frontend/components/ColumnData";
import OutputForm from "@/frontend/components/OutputForm";
import {
  databseGetAction,
  dbAllDataGetAction,
} from "@/frontend/redux/actions/databaseActions";
import {
  DATABASE_GET_RESET,
  DB_ALL_DATA_GET_RESET,
} from "@/frontend/redux/constants/databaseConstants";
import AddDBDataForm from "@/frontend/components/AddDBDataForm";

const EmpInfo = () => {
  const router = useRouter();
  const dispatch = useDispatch();

  let dbName = router.query.databaseName;
  const [allowEmployeeGet, setEmployeeGet] = useState(false);
  const [visisbleUpEmp, setVisibleUpEmp] = useState(false);
  const [visibleAddNewEmpData, setVisibleAddNewEmpData] = useState(false);
  const [columnName, setColumnName] = useState("");
  const [columnData, setColumnData] = useState("");
  const [columnType, setColumnType] = useState("Number");
  const [outputForm, setOutputForm] = useState([]);

  const [dbSchema, setDbSchema] = useState({});
  const [schemaFromFile, setSchemaFromFile] = useState({});

  const databaseGet = useSelector((state) => state.databaseGet);
  const {
    loading: loadingdatabaseget,
    error: errordatabaseget,
    databaseget,
  } = databaseGet;
  const dbAllDataGet = useSelector((state) => state.dbAllDataGet);
  const {
    loading: loadingdballdataget,
    error: errordballdataget,
    dballdataget,
  } = dbAllDataGet;
  useEffect(() => {
    if (!databaseget && dbName && !allowEmployeeGet) {
      dispatch(databseGetAction(dbName));
    }
    if (!dballdataget && dbName && !allowEmployeeGet) {
      dispatch(dbAllDataGetAction(dbName));
    }
    if (databaseget) {
      const tempSchema = {};
      const tempSchemaFromFile = {};
      const schemaPaths = databaseget.schema || "";
      const schemaFromFilePaths = databaseget.schemaFromStoredFile || "";
      if (schemaPaths) {
        Object.keys(databaseget.schema.paths).forEach(
          (key) => (tempSchema[key] = databaseget.schema.paths[key].instance)
        );
        delete tempSchema.__v;
        delete tempSchema._id;
      }
      if (schemaFromFilePaths) {
        Object.keys(schemaFromFilePaths).forEach(
          (key) => (tempSchemaFromFile[key] = schemaFromFilePaths[key])
        );
      }
      setDbSchema(tempSchema);
      setSchemaFromFile(tempSchemaFromFile);
    }
  }, [dispatch, databaseget, dbName, allowEmployeeGet, dballdataget]);
  console.log(dbSchema);

  const updateEmployeehandler = () => {
    if (!visibleAddNewEmpData) {
      setVisibleUpEmp(!visisbleUpEmp);
    } else {
      toast.error("Add New Emp Data in Progress...");
    }
  };
  const addNewEmployeeDatahandler = () => {
    if (!visisbleUpEmp) {
      setVisibleAddNewEmpData(!visibleAddNewEmpData);
    } else {
      toast.error("Update Action in Progress...");
    }
  };
  const backButtonHandler = () => {
    dbName = "";
    setEmployeeGet(true);
    dispatch({ type: DATABASE_GET_RESET });
    dispatch({ type: DB_ALL_DATA_GET_RESET });
  };

  return (
    <>
      <section>
        <Head>
          <title>{dbName} Info Page</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css"
            integrity="sha512-MV7K8+y+gLIBoVD59lQIYicR65iaqukzvf/nwasF0nqhPay5w/9lJmVM2hMDcnK1OnMGCdVK+iQrJ7lzPJQd1w=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"
          />
        </Head>
        <ToastContainer position="bottom-right" />
        <main className="py-5">
          <div className="container mx-auto flex justify-between py-5 border-b">
            <Link href="/">
              <button
                onClick={backButtonHandler}
                className="flex bg-yellow-400 text-white px-4 py-2 border rounded-md hover:bg-grary-50 hover:border-indigo-500 hover:text-gray-800"
              >
                <span className="px-1">
                  <BiArrowBack size={23}></BiArrowBack>
                </span>
                Go Back{" "}
              </button>
            </Link>
            <h1 className="text-xl md:text-5xl text-center font-bold">
              {dbName} DB Info
            </h1>
          </div>
          <div className="container mx-auto flex justify-between py-5 border-b">
            <div className="left flex gap-3">
              <button
                onClick={updateEmployeehandler}
                className="flex bg-yellow-400 text-white px-4 py-2 border rounded-md hover:bg-grary-50 hover:border-indigo-500 hover:text-gray-800"
              >
                Update {dbName} data{" "}
                <span className="px-1">
                  <BiEdit size={23}></BiEdit>
                </span>
              </button>
            </div>
            <div className="right flex gap-3">
              <button
                onClick={addNewEmployeeDatahandler}
                className="flex bg-yellow-400 text-white px-4 py-2 border rounded-md hover:bg-grary-50 hover:border-indigo-500 hover:text-gray-800"
              >
                Add new {dbName} data{" "}
                <span className="px-1">
                  <BiEdit size={23}></BiEdit>
                </span>
              </button>
            </div>
          </div>
          {/* collapsable form */}
          {visisbleUpEmp ? (
            <div className="container mx-auto py-5 border-b">
              {dbName && (
                <UpdateUserForm
                  EmpId={EmpId}
                  employeeget={employeeget}
                  visisbleUpEmp={visisbleUpEmp}
                  setVisibleUpEmphandler={setVisibleUpEmp}
                />
              )}
            </div>
          ) : (
            <></>
          )}
          {/* collapsable form */}
          {visibleAddNewEmpData && dbSchema && dbName ? (
            <div className="container mx-auto py-5 border-b">
              <AddDBDataForm
                schemaFromFile={schemaFromFile}
                dbName={dbName}
                dbSchema={dbSchema}
              />
            </div>
          ) : (
            <></>
          )}
          <div className="container mx-auto border-t">
            <div className="container mx-auto flex justify-between py-5 border-b">
              <div className="bg-yellow-300 p-4 rounded-md shadow-md">
                <h6 className="text-xl pt-2 pr-8 font-bold">Database Name</h6>
                <span>{dbName}</span>
                <h6 className="text-xl pt-2 pr-8 font-bold">Database Schema</h6>
                {dbSchema &&
                  Object.keys(dbSchema).map((key, index) => (
                    <div key={index}>
                      <span>
                        {key} - {dbSchema[key]}
                      </span>
                    </div>
                  ))}
              </div>
            </div>
          </div>
          <div className="container mx-auto py-5 border-b">
            <div className="py-5 grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {dballdataget ? (
                dballdataget.result.map((data) => (
                  <div
                    key={data._id}
                    className="bg-white p-4 rounded-md shadow-md"
                  >
                    <div className="flex justify-between">
                      <div className="p-2">
                        <h6 className="text-xl font-bold">Database Name</h6>
                        <span>{dbName}</span>
                        <br></br>
                        <h6 className="text-xl font-bold">Database Data</h6>
                        <span>
                          <strong>UID</strong> - {data._id}
                        </span>
                        {Object.keys(data).map((key, index) => (
                          <span key={index}>
                            {key !== "_id" && key !== "__v" && (
                              <>
                                <br></br>
                                <strong>{key}</strong> - {data[key]}
                              </>
                            )}
                          </span>
                        ))}
                      </div>
                      <div className="p-2">
                        <button
                          onClick={() => viewDBhandler(model)}
                          className="my-2 flex bg-yellow-500 text-white px-4 py-2 border rounded-md hover:bg-grary-50 hover:border-yellow-500 hover:text-gray-800"
                        >
                          <span className="px-1">
                            <BsDatabase size={23}></BsDatabase>
                          </span>
                        </button>
                        <button
                          onClick={() => deleteDBhandler(model)}
                          className="flex bg-red-500 text-white px-4 py-2 border rounded-md hover:bg-grary-50 hover:border-red-500 hover:text-gray-800"
                        >
                          <span className="px-1">
                            <BsDatabase size={23}></BsDatabase>
                          </span>
                        </button>
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <></>
              )}
            </div>
          </div>
        </main>
      </section>
    </>
  );
};

export default EmpInfo;
